//
// Created by danseremet on 2020-04-07.
//

#include "PerlinNoiseGenerator.h"


PerlinNoiseGenerator::PerlinNoiseGenerator(float roughness, int octaves, float amplitude) :
        roughness(roughness), octaves(octaves), amplitude(amplitude) {

    std::uniform_int_distribution<int> zeroTo256(0, 255);

    seed = uni(rng);
//    std::cout << seed << '\n';

    int a[] = {52, 140, 199, 36, 223, 172, 70, 55, 124, 66, 242, 126, 125, 205, 51, 112, 5, 26, 191, 60, 8, 41, 26, 170, 27, 159, 205,
               106, 15, 104, 111, 86, 152, 52, 30, 73, 128, 211, 253, 36, 180, 118, 3, 90, 197, 3, 71, 247, 139, 9, 91, 198, 117, 58,
               179, 217, 152, 230, 215, 79, 169, 137, 3, 206, 222, 252, 184, 37, 69, 179, 196, 96, 153, 76, 98, 228, 232, 114, 26, 108,
               58, 159, 203, 102, 13, 91, 57, 78, 3, 145, 150, 75, 141, 232, 38, 200, 133, 245, 249, 51, 217, 127, 163, 117, 162, 242,
               73, 42, 10, 116, 152, 20, 216, 143, 241, 187, 195, 252, 16, 82, 46, 67, 5, 42, 28, 204, 245, 186, 92, 126, 7, 230, 75,
               6, 224, 195, 60, 5, 22, 26, 24, 26, 8, 69, 47, 253, 175, 164, 228, 179, 197, 198, 80, 127, 107, 45, 176, 10, 98, 147,
               209, 244, 97, 87, 89, 17, 89, 88, 208, 168, 190, 211, 129, 250, 252, 78, 207, 38, 0, 233, 41, 157, 12, 77, 115, 19, 211,
               220, 117, 71, 31, 208, 222, 30, 2, 73, 205, 28, 163, 75, 165, 35, 167, 114, 151, 141, 223, 61, 250, 114, 51, 125, 238,
               73, 114, 248, 60, 151, 48, 152, 151, 65, 250, 138, 76, 34, 149, 108, 26, 195, 61, 103, 39, 102, 91, 179, 164, 199, 51,
               70, 12, 166, 147, 146, 218, 56, 236, 58, 248, 51, 104, 106, 152, 113, 204, 141, 192, 72, 41, 165, 48, 150, 171, 18, 172,
               41, 196, 172, 115, 117, 229, 173, 84, 222, 233, 154, 42, 241, 85, 99, 251, 162, 246, 13, 103, 221, 158, 61, 161, 242, 51,
               75, 79, 199, 103, 110, 10, 104, 102, 227, 158, 27, 199, 182, 59, 56, 50, 27, 133, 87, 36, 236, 230, 150, 135, 92, 185,
               116, 236, 155, 111, 119, 15, 222, 113, 214, 2, 167, 104, 64, 114, 187, 61, 183, 35, 89, 109, 179, 18, 120, 41, 224, 190,
               1, 149, 66, 34, 122, 169, 106, 15, 216, 23, 120, 19, 253, 49, 127, 182, 91, 186, 183, 26, 94, 118, 186, 93, 80, 25, 21,
               181, 226, 222, 109, 225, 218, 192, 174, 116, 239, 74, 54, 241, 100, 92, 142, 115, 136, 76, 97, 111, 161, 56, 119, 10,
               71, 241, 49, 140, 83, 127, 69, 151, 103, 152, 68, 23, 209, 115, 37, 142, 54, 82, 165, 162, 87, 146, 189, 165, 30, 108,
               24, 52, 87, 65, 66, 122, 163, 55, 32, 229, 190, 199, 164, 63, 28, 197, 80, 221, 39, 79, 254, 0, 39, 122, 248, 50, 85,
               76, 179, 189, 223, 219, 25, 130, 127, 243, 68, 197, 126, 208, 222, 58, 22, 43, 52, 195, 205, 164, 64, 4, 43, 40, 61,
               30, 30, 193, 240, 224, 241, 248, 92, 79, 234, 168, 190, 18, 81, 111, 166, 121, 119, 186, 120, 47, 220, 192, 209, 229,
               184, 155, 88, 158, 153, 144, 118, 28, 101, 251, 115, 206, 57};

    for (int i{0}; i < 512; i++) {
        int randomInt = zeroTo256(rng);
//        p.push_back(a[i]);                // Use this for CONSTANT MAP with permutations in a.
        p.push_back(randomInt);             // Use this for a RANDOM MAP.
    }
}

float PerlinNoiseGenerator::getAmplitude() const {
    return amplitude;
}

/**
 * Adapted from the original https://cs.nyu.edu/~perlin/noise/
 */
double PerlinNoiseGenerator::noise(double x, double y, double z) {
    int X = (int) std::floor(x) & 255,
            Y = (int) std::floor(y) & 255,
            Z = (int) std::floor(z) & 255;
    x -= std::floor(x);
    y -= std::floor(y);
    z -= std::floor(z);
    double u = fade(x),
            v = fade(y),
            w = fade(z);
    int A = p[X] + Y, AA = p[A] + Z, AB = p[A + 1] + Z,
            B = p[X + 1] + Y, BA = p[B] + Z, BB = p[B + 1] + Z;

    return lerp(w, lerp(v, lerp(u, grad(p[AA], x, y, z),
                                grad(p[BA], x - 1, y, z)),
                        lerp(u, grad(p[AB], x, y - 1, z),
                             grad(p[BB], x - 1, y - 1, z))),
                lerp(v, lerp(u, grad(p[AA + 1], x, y, z - 1),
                             grad(p[BA + 1], x - 1, y, z - 1)),
                     lerp(u, grad(p[AB + 1], x, y - 1, z - 1),
                          grad(p[BB + 1], x - 1, y - 1, z - 1))));
}

double PerlinNoiseGenerator::fade(double t) {
    return t * t * t * (t * (t * 6 - 15) + 10);
}

double PerlinNoiseGenerator::grad(int hash, double x, double y, double z) {
    int h = hash & 15;
    double u = h < 8 ? x : y,
            v = h < 4 ? y : h == 12 || h == 14 ? x : z;
    return ((h & 1) == 0 ? u : -u) + ((h & 2) == 0 ? v : -v);
}

double PerlinNoiseGenerator::lerp(double t, double a, double b) {
    return a + t * (b - a);
}

